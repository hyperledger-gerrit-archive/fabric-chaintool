interface  ::= ( message | enum )* functions?

message ::= <"message"> ident messageBody

enum ::= <"enum"> ident <"{"> ( enumField | <";"> )* <"}">

enumField ::= enumName <"="> enumValue <";">
<enumName> ::= ident
<enumValue> ::= intLit

functions ::= <"functions"> functionblock

<functionblock> ::=  <"{"> function* <"}">
function ::= rettype functionName <"("> param? <")"> <"="> index <";">
functionName := ident
rettype ::= ident
param ::= ident

optionBody ::= ident ( "." ident )* "=" constant

<messageBody> ::= <"{"> ( field | enum | message )* <"}">

field ::= modifier? type fieldName <"="> index ( <"["> fieldOption ( <","> fieldOption )* <"]"> )? <";">

fieldName ::= ident
fieldOption ::= optionBody | "default" "=" constant

modifier ::= "required" | "repeated"

type ::= scalar / userType / map

scalar ::= "double" | "float" | "int32" | "int64" | "uint32" | "uint64" | "sint32" | "sint64" | "fixed32" | "fixed64" | "sfixed32" | "sfixed64" | "bool" | "string" | "bytes"

userType ::= ( "."? ident )+

map = <"map"> <"<"> keyType <","> type <">">
keyType = "int32" | "int64" | "uint32" | "uint64" | "sint32" | "sint64" |
          "fixed32" | "fixed64" | "sfixed32" | "sfixed64" | "bool" | "string"

constant ::= ident | intLit | floatLit | strLit | boolLit

<ident> ::= #"[A-Za-z_][\w_]*"

camelIdent ::= #"[A-Z][\w_]*"

index ::= intLit

<intLit> ::= decInt | hexInt | octInt

<decInt> ::= #"\d+"

<hexInt> ::= #"0[xX]([A-Fa-f0-9])+"

<octInt> ::= #"0[0-7]+"

<floatLit> ::= #"\d+(\.\d+)?([Ee][\+-]?\d+)?"

<boolLit> ::= "true" | "false"

<strLit> ::= quote ( hexEscape | octEscape | charEscape )* quote

<quote> ::= #"[\"']"

<hexEscape> ::= #"\\[Xx][A-Fa-f0-9]{1,2}"

<octEscape> ::= #"\\0?[0-7]{1,3}"

<charEscape> ::= #"\\[abfnrtv\\\?'\"]"
